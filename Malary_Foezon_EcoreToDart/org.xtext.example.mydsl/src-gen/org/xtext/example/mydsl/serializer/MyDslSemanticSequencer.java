/*
 * generated by Xtext 2.28.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import malary_Foezon_EcoreToDart.BDD;
import malary_Foezon_EcoreToDart.Champ;
import malary_Foezon_EcoreToDart.Collection;
import malary_Foezon_EcoreToDart.Documents;
import malary_Foezon_EcoreToDart.Malary_Foezon_EcoreToDartPackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Malary_Foezon_EcoreToDartPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Malary_Foezon_EcoreToDartPackage.BDD:
				sequence_BDD(context, (BDD) semanticObject); 
				return; 
			case Malary_Foezon_EcoreToDartPackage.CHAMP:
				sequence_Champ(context, (Champ) semanticObject); 
				return; 
			case Malary_Foezon_EcoreToDartPackage.COLLECTION:
				sequence_Collection(context, (Collection) semanticObject); 
				return; 
			case Malary_Foezon_EcoreToDartPackage.DOCUMENTS:
				sequence_Documents(context, (Documents) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BDD returns BDD
	 *
	 * Constraint:
	 *     (type=TypeBDD? (collections+=Collection collections+=Collection*)?)
	 * </pre>
	 */
	protected void sequence_BDD(ISerializationContext context, BDD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Champ returns Champ
	 *
	 * Constraint:
	 *     champ=TypeChamp?
	 * </pre>
	 */
	protected void sequence_Champ(ISerializationContext context, Champ semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Collection returns Collection
	 *
	 * Constraint:
	 *     (titre=EString? (documents+=Documents documents+=Documents*)?)
	 * </pre>
	 */
	protected void sequence_Collection(ISerializationContext context, Collection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Documents returns Documents
	 *
	 * Constraint:
	 *     (id=EString? (champs+=Champ champs+=Champ*)? (collections+=Collection collections+=Collection*)?)
	 * </pre>
	 */
	protected void sequence_Documents(ISerializationContext context, Documents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
