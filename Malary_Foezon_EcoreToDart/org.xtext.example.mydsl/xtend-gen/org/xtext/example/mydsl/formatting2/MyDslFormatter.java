/**
 * generated by Xtext 2.28.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import malary_Foezon_EcoreToDart.BDD;
import malary_Foezon_EcoreToDart.Collection;
import malary_Foezon_EcoreToDart.Documents;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final BDD bDD, @Extension final IFormattableDocument document) {
    EList<Collection> _collections = bDD.getCollections();
    for (final Collection collection : _collections) {
      document.<Collection>format(collection);
    }
  }

  protected void _format(final Collection collection, @Extension final IFormattableDocument document) {
    EList<Documents> _documents = collection.getDocuments();
    for (final Documents documents : _documents) {
      document.<Documents>format(documents);
    }
  }

  public void format(final Object bDD, final IFormattableDocument document) {
    if (bDD instanceof XtextResource) {
      _format((XtextResource)bDD, document);
      return;
    } else if (bDD instanceof BDD) {
      _format((BDD)bDD, document);
      return;
    } else if (bDD instanceof Collection) {
      _format((Collection)bDD, document);
      return;
    } else if (bDD instanceof EObject) {
      _format((EObject)bDD, document);
      return;
    } else if (bDD == null) {
      _format((Void)null, document);
      return;
    } else if (bDD != null) {
      _format(bDD, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(bDD, document).toString());
    }
  }
}
